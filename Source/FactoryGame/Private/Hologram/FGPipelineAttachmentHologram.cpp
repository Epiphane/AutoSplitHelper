// This file has been automatically generated by the Unreal Header Implementation tool

#include "Hologram/FGPipelineAttachmentHologram.h"

AFGPipelineAttachmentHologram::AFGPipelineAttachmentHologram() : Super() {
	this->mBuildStep = EPipelineAttachmentBuildStep::PABS_PlacementAndDirection;
	this->mMaxValidTurnOffset = 140.0;
	this->mMaxValidTurnAngle = 3.0;
	this->mRotationAxis = EAxis::Z;
	this->mIncrementSnappedConnectionOnScroll = true;
	this->mUseProducerDirectionalArrow = true;
	this->mProducerArrowRelativeLocation = FVector((0, 0, 200));
	this->mWallSnapOffset = FVector2D((0, 75));
	this->mHasPipeRotationBuildStep = true;
	this->mSnappedPipeline = nullptr;
	this->mSnappedConnectionComponent = nullptr;
	this->mNeedsValidFloor = false;
}
void AFGPipelineAttachmentHologram::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGPipelineAttachmentHologram, mSnappedPipeline);
}
void AFGPipelineAttachmentHologram::BeginPlay(){ }
bool AFGPipelineAttachmentHologram::IsValidHitResult(const FHitResult& hitResult) const{ return bool(); }
bool AFGPipelineAttachmentHologram::DoMultiStepPlacement(bool isInputFromARelease){ return bool(); }
void AFGPipelineAttachmentHologram::SetHologramLocationAndRotation(const FHitResult& hitResult){ }
bool AFGPipelineAttachmentHologram::TrySnapToActor(const FHitResult& hitResult){ return bool(); }
float AFGPipelineAttachmentHologram::GetHologramHoverHeight() const{ return float(); }
void AFGPipelineAttachmentHologram::GetIgnoredClearanceActors(TArray< AActor* >& ignoredActors) const{ }
bool AFGPipelineAttachmentHologram::ShouldActorBeConsideredForGuidelines( AActor* actor) const{ return bool(); }
void AFGPipelineAttachmentHologram::ScrollRotate(int32 delta, int32 step){ }
int32 AFGPipelineAttachmentHologram::GetRotationStep() const{ return int32(); }
void AFGPipelineAttachmentHologram::ConfigureComponents( AFGBuildable* inBuildable) const{ }
void AFGPipelineAttachmentHologram::CheckValidPlacement(){ }
void AFGPipelineAttachmentHologram::TrySnapToConnection(const float snapDistance, FVector& out_location, FVector& out_normal){ }
FName AFGPipelineAttachmentHologram::mConnection0 = FName();
FName AFGPipelineAttachmentHologram::mConnection1 = FName();
