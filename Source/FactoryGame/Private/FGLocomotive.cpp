// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGLocomotive.h"
#include "FGLocomotiveMovementComponent.h"
#include "FGPowerConnectionComponent.h"
#include "FGPowerInfoComponent.h"

void AFGLocomotive::GetLifetimeReplicatedProps(TArray< FLifetimeProperty >& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGLocomotive, mPowerInfo);
	DOREPLIFETIME(AFGLocomotive, mHasPower);
	DOREPLIFETIME(AFGLocomotive, mHeadlightMode);
}
AFGLocomotive::AFGLocomotive() : Super() {
	this->mPowerConsumption = FFloatInterval(0.0, 15.0);
	this->mSlidingShoe = CreateDefaultSubobject<UFGPowerConnectionComponent>(TEXT("SlidingShoe"));
	this->mPowerInfo = CreateDefaultSubobject<UFGPowerInfoComponent>(TEXT("powerInfo"));
	this->mHasPower = false;
	this->mVehicleMovement = CreateDefaultSubobject<UFGLocomotiveMovementComponent>(TEXT("MovementComp"));
	this->mHeadlightMode = ELocomotiveHeadlightsMode::LHM_Off;
	this->mHeadlightModes[0].ShowBeam = false;;
	this->mHeadlightModes[0].Color = FLinearColor(0.0, 0.0, 0.0, 0.0);;
	this->mHeadlightModes[0].Intensity = 0.0;;
	this->mHeadlightModes[1].ShowBeam = false;;
	this->mHeadlightModes[1].Color = FLinearColor(0.0, 0.0, 0.0, 0.0);;
	this->mHeadlightModes[1].Intensity = 0.0;;
	this->mHeadlightModes[2].ShowBeam = false;;
	this->mHeadlightModes[2].Color = FLinearColor(0.0, 0.0, 0.0, 0.0);;
	this->mHeadlightModes[2].Intensity = 0.0;;
}
void AFGLocomotive::BeginPlay(){ }
void AFGLocomotive::Tick(float dt){ }
bool AFGLocomotive::DriverEnter( AFGCharacterPlayer* driver){ return bool(); }
bool AFGLocomotive::DriverLeave(bool keepDriving){ return bool(); }
void AFGLocomotive::UpdatePower(){ }
void AFGLocomotive::GainedSignificance_Implementation(){ }
EMultipleUnitControl AFGLocomotive::GetMultipleUnitRole() const{ return EMultipleUnitControl(); }
bool AFGLocomotive::CanSetTrainMultipleUnitMaster() const{ return bool(); }
bool AFGLocomotive::SetMultipleUnitControlMaster(bool force){ return bool(); }
void AFGLocomotive::ClearMultipleUnitControlMaster(){ }
void AFGLocomotive::DisplayDebug( UCanvas* canvas, const  FDebugDisplayInfo& debugDisplay, float& YL, float& YPos){ }
void AFGLocomotive::GiveHumanDriverControl(){ }
void AFGLocomotive::UpdateHeadlightsMode(){ }
void AFGLocomotive::SetPowerConsumption(float pct){ }
void AFGLocomotive::SetPowerRegeneration(float pct){ }
void AFGLocomotive::OnHasPowerChanged(){ }
void AFGLocomotive::OnRep_HeadlightMode(){ }
FName AFGLocomotive::VehicleMovementComponentName = FName();
