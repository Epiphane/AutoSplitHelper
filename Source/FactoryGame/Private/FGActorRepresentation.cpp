// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGActorRepresentation.h"

bool UFGActorRepresentation::IsSupportedForNetworking() const{ return bool(); }
void UFGActorRepresentation::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(UFGActorRepresentation, mRealActor);
	DOREPLIFETIME(UFGActorRepresentation, mActorLocation);
	DOREPLIFETIME(UFGActorRepresentation, mActorRotation);
	DOREPLIFETIME(UFGActorRepresentation, mIsStatic);
	DOREPLIFETIME(UFGActorRepresentation, mRepresentationTexture);
	DOREPLIFETIME(UFGActorRepresentation, mRepresentationText);
	DOREPLIFETIME(UFGActorRepresentation, mRepresentationColor);
	DOREPLIFETIME(UFGActorRepresentation, mRepresentationType);
	DOREPLIFETIME(UFGActorRepresentation, mFogOfWarRevealType);
	DOREPLIFETIME(UFGActorRepresentation, mFogOfWarRevealRadius);
	DOREPLIFETIME(UFGActorRepresentation, mShouldShowInCompass);
	DOREPLIFETIME(UFGActorRepresentation, mShouldShowOnMap);
	DOREPLIFETIME(UFGActorRepresentation, mCompassViewDistance);
}
void UFGActorRepresentation::SetupActorRepresentation(AActor* realActor, bool isLocal, float lifeSpan){ }
void UFGActorRepresentation::TrySetupDestroyTimer(float lifeSpan){ }
void UFGActorRepresentation::RemoveActorRepresentation(){ }
FVector UFGActorRepresentation::GetActorLocation() const{ return FVector(); }
FRotator UFGActorRepresentation::GetActorRotation() const{ return FRotator(); }
UTexture2D* UFGActorRepresentation::GetRepresentationTexture() const{ return nullptr; }
FText UFGActorRepresentation::GetRepresentationText() const{ return FText(); }
FLinearColor UFGActorRepresentation::GetRepresentationColor() const{ return FLinearColor(); }
ERepresentationType UFGActorRepresentation::GetRepresentationType() const{ return ERepresentationType(); }
bool UFGActorRepresentation::GetShouldShowInCompass() const{ return bool(); }
bool UFGActorRepresentation::GetShouldShowOnMap() const{ return bool(); }
EFogOfWarRevealType UFGActorRepresentation::GetFogOfWarRevealType() const{ return EFogOfWarRevealType(); }
float UFGActorRepresentation::GetFogOfWarRevealRadius() const{ return float(); }
void UFGActorRepresentation::SetIsOnClient(bool onClient){ }
ECompassViewDistance UFGActorRepresentation::GetCompassViewDistance() const{ return ECompassViewDistance(); }
bool UFGActorRepresentation::GetScaleWithMap() const{ return bool(); }
float UFGActorRepresentation::GetScaleOnMap() const{ return float(); }
void UFGActorRepresentation::SetLocalCompassViewDistance(ECompassViewDistance compassViewDistance){ }
bool UFGActorRepresentation::CanBeHighlighted() const{ return bool(); }
void UFGActorRepresentation::SetHighlighted(bool highlighted){ }
bool UFGActorRepresentation::IsHighlighted() const{ return bool(); }
bool UFGActorRepresentation::IsHighlighted(FLinearColor& out_highlightColor, bool& out_HighlightByLocalPlayer) const{ return bool(); }
UFGHighlightedMarker* UFGActorRepresentation::CreateHighlightedMarker(UObject* owner){ return nullptr; }
AFGActorRepresentationManager* UFGActorRepresentation::GetActorRepresentationManager(){ return nullptr; }
void UFGActorRepresentation::UpdateLocation(){ }
void UFGActorRepresentation::UpdateRotation(){ }
void UFGActorRepresentation::UpdateRepresentationText(){ }
void UFGActorRepresentation::UpdateRepresentationTexture(){ }
void UFGActorRepresentation::UpdateRepresentationColor(){ }
void UFGActorRepresentation::UpdateShouldShowInCompass(){ }
void UFGActorRepresentation::UpdateShouldShowOnMap(){ }
void UFGActorRepresentation::UpdateFogOfWarRevealType(){ }
void UFGActorRepresentation::UpdateFogOfWarRevealRadius(){ }
void UFGActorRepresentation::UpdateCompassViewDistance(){ }
void UFGActorRepresentation::OnRep_ShouldShowInCompass(){ }
void UFGActorRepresentation::OnRep_ShouldShowOnMap(){ }
void UFGActorRepresentation::OnRep_ActorRepresentationUpdated(){ }
