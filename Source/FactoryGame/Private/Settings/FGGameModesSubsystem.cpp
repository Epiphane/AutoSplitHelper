// This file has been automatically generated by the Unreal Header Implementation tool

#include "Settings/FGGameModesSubsystem.h"

void UFGGameModesSubsystem::Initialize(FSubsystemCollectionBase& Collection){ }
FVariant UFGGameModesSubsystem::GetOptionValue(const FString& strId) const{ return FVariant(); }
void UFGGameModesSubsystem::ForceSetOptionValue(const FString& strId, const FVariant& variant, const UObject* instigator){ }
void UFGGameModesSubsystem::SubscribeToOptionUpdate(const FString& strId, const FOnOptionUpdated& onOptionUpdatedDelegate){ }
void UFGGameModesSubsystem::UnsubscribeToOptionUpdate(const FString& strId, const FOnOptionUpdated& onOptionUpdatedDelegate){ }
void UFGGameModesSubsystem::ApplyChanges(){ }
void UFGGameModesSubsystem::ResetAllSettingsToDefault(){ }
bool UFGGameModesSubsystem::GetBoolOptionValue(const FString& cvar) const{ return bool(); }
bool UFGGameModesSubsystem::GetBoolUIDisplayValue(const FString& cvar) const{ return bool(); }
void UFGGameModesSubsystem::SetBoolOptionValue(const FString& cvar, bool value){ }
int32 UFGGameModesSubsystem::GetIntOptionValue(const FString& cvar) const{ return int32(); }
int32 UFGGameModesSubsystem::GetIntUIDisplayValue(const FString& cvar) const{ return int32(); }
void UFGGameModesSubsystem::SetIntOptionValue(const FString& cvar, int32 newValue){ }
float UFGGameModesSubsystem::GetFloatOptionValue(const FString& cvar) const{ return float(); }
float UFGGameModesSubsystem::GetFloatUIDisplayValue(const FString& cvar) const{ return float(); }
void UFGGameModesSubsystem::SetFloatOptionValue(const FString& cvar, float newValue){ }
bool UFGGameModesSubsystem::HasAnyUnsavedOptionValueChanges() const{ return bool(); }
bool UFGGameModesSubsystem::HasPendingApplyOptionValue(const FString& cvar) const{ return bool(); }
bool UFGGameModesSubsystem::HasPendingAnyRestartOptionValue(const FString& cvar) const{ return bool(); }
bool UFGGameModesSubsystem::GetRequireSessionRestart() const{ return bool(); }
bool UFGGameModesSubsystem::GetRequireGameRestart() const{ return bool(); }
void UFGGameModesSubsystem::SubscribeToDynamicOptionUpdate(const FString& cvar, const FOptionUpdated& optionUpdatedDelegate){ }
void UFGGameModesSubsystem::UnsubscribeToDynamicOptionUpdate(const FString& cvar, const FOptionUpdated& optionUpdatedDelegate){ }
void UFGGameModesSubsystem::UnsubscribeToAllDynamicOptionUpdate(UObject* boundObject){ }
TArray<class UFGDynamicOptionsRow*> UFGGameModesSubsystem::GetOptionWidgetsInCategory(UUserWidget* owningWidget, EOptionCategory category){ return TArray<class UFGDynamicOptionsRow*>(); }
TArray<class UUserWidget*> UFGGameModesSubsystem::GetGameModeSettings(UUserWidget* owningWidget){ return TArray<class UUserWidget*>(); }
TArray<FUserSettingCatergoryMapping> UFGGameModesSubsystem::GetCategorizedGameModeSettings(UUserWidget* owningWidget){ return TArray<FUserSettingCatergoryMapping>(); }
UFGUserSetting* UFGGameModesSubsystem::GetSettingFromStrId(const FString& strId) const{ return nullptr; }
