// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGFoliageRemoval.h"
#include "Components/SceneComponent.h"

bool FByteRemovalIndices::NetDeltaSerialize(FNetDeltaSerializeInfo& DeltaParms){ return bool(); }
void FByteRemovalIndices::AddReplicatedIndex(uint32 index){ }
bool FShortRemovalIndices::NetDeltaSerialize(FNetDeltaSerializeInfo& DeltaParms){ return bool(); }
void FShortRemovalIndices::AddReplicatedIndex(uint32 index){ }
bool FLongRemovalIndices::NetDeltaSerialize(FNetDeltaSerializeInfo& DeltaParms){ return bool(); }
void FLongRemovalIndices::AddReplicatedIndex(uint32 index){ }
void AFGFoliageRemoval::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGFoliageRemoval, mByteRemovalIndices);
	DOREPLIFETIME(AFGFoliageRemoval, mShortRemovalIndices);
	DOREPLIFETIME(AFGFoliageRemoval, mLongRemovalIndices);
	DOREPLIFETIME(AFGFoliageRemoval, mRemovalCount);
	DOREPLIFETIME(AFGFoliageRemoval, mLevelName);
	DOREPLIFETIME(AFGFoliageRemoval, mFoliageTypeName);
}
bool AFGFoliageRemoval::IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector& SrcLocation) const{ return bool(); }
AFGFoliageRemoval::AFGFoliageRemoval() : Super() {
	this->mRemovalCount = 0;
	this->mLevelName = TEXT("None");
	this->mFoliageTypeName = TEXT("None");
	this->mLevelBounds = FBox(FVector::ZeroVector, FVector::ZeroVector);
	this->NetDormancy = ENetDormancy::DORM_Awake;
	this->NetCullDistanceSquared = 400000000.0;
	this->NetUpdateFrequency = 1.0;
	this->MinNetUpdateFrequency = 1.0;
	this->NetPriority = 0.5;
	this->RootComponent = CreateDefaultSubobject<USceneComponent>(TEXT("SceneComponent"));
}
void AFGFoliageRemoval::PostActorCreated(){ Super::PostActorCreated(); }
void AFGFoliageRemoval::BeginPlay(){ }
void AFGFoliageRemoval::Destroyed(){ }
void AFGFoliageRemoval::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGFoliageRemoval::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGFoliageRemoval::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGFoliageRemoval::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGFoliageRemoval::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGFoliageRemoval::NeedTransform_Implementation(){ return bool(); }
bool AFGFoliageRemoval::ShouldSave_Implementation() const{ return bool(); }
UHierarchicalInstancedStaticMeshComponent* AFGFoliageRemoval::GetAnyMeshComponent() const{ return nullptr; }
void AFGFoliageRemoval::ApplyInitialRemovals_Server(bool firstLoad){ }
bool AFGFoliageRemoval::RemoveFoliageInstanceById(int32 instanceId,  UHierarchicalInstancedStaticMeshComponent* component){ return bool(); }
bool AFGFoliageRemoval::RemoveFoliageInstanceFromComponent(const FTransform& transform,  UHierarchicalInstancedStaticMeshComponent* component){ return bool(); }
UHierarchicalInstancedStaticMeshComponent* AFGFoliageRemoval::RemoveFoliageInstanceByTransform(const FTransform& transform){ return nullptr; }
bool AFGFoliageRemoval::RemoveFoliageInstanceByData(FoliageInstanceData& foliageInstanceData){ return bool(); }
bool AFGFoliageRemoval::RemoveFoliageInstances(TArray< int32 >& instanceIds,  UHierarchicalInstancedStaticMeshComponent* component, TArray< FVector >& out_removedLocations){ return bool(); }
bool AFGFoliageRemoval::AddRemoval(const FVector& location, const TArray< FoliageInstanceData* >& foliageInstanceDataResult, const FoliageTypeData* foliageTypeData){ return bool(); }
int AFGFoliageRemoval::FindInstanceIndexByTransform(const FTransform& transform){ return int(); }
void AFGFoliageRemoval::Debug_PrintReplicationProgress() const{ }
void AFGFoliageRemoval::RemovedInstances_ItemAdded(int32 removalIndex){ }
void AFGFoliageRemoval::RemovedInstances_ItemRemoved(int32 idx){ }
void AFGFoliageRemoval::RemovedInstances_ItemChanged(int32 idx){ }
void AFGFoliageRemoval::RemovedInstances_ReplicationFrameDone(){ }
int32 AFGFoliageRemoval::FindInstanceByTransform(const FTransform& foliageTransform, const  UHierarchicalInstancedStaticMeshComponent* component) const{ return int32(); }
void AFGFoliageRemoval::LevelStreamedIn(bool firstLoad){ }
void AFGFoliageRemoval::LevelStreamedOut(){ }
void AFGFoliageRemoval::RegisterWithSubsystem(){ }
void AFGFoliageRemoval::RemoveFromSubsystem(){ }
bool AFGFoliageRemoval::RemoveFoliageInstance_Internal(const FVector& location, int32 instanceId,  UHierarchicalInstancedStaticMeshComponent* component){ return bool(); }
bool AFGFoliageRemoval::RemoveFoliageInstances_Internal(const TArray< FVector >& locations, const TArray< int32 >& instanceIds,  UHierarchicalInstancedStaticMeshComponent* component){ return bool(); }
void AFGFoliageRemoval::OnRep_RemovalCount(int oldValue){ }
void AFGFoliageRemoval::TryApplyInitialRemovals_Client(){ }
