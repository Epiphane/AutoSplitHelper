// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGBoomBoxPlayer.h"
#include "AkAudio/Classes/AkComponent.h"

AFGBoomBoxPlayer::AFGBoomBoxPlayer() : Super() {
	this->mVolumeRtpc = nullptr;
	this->mTurboBassOutputRTPC = nullptr;
	this->mTurboBassRTPC = nullptr;
	this->mTurboBassAudioEvent = nullptr;
	this->mTurboBassBlockingThreshold = -48.0;
	this->mAkComponent = CreateDefaultSubobject<UAkComponent>(TEXT("AkComponent"));
	this->mState.mCurrentTape = nullptr;
	this->mState.mCurrentSongIx = -1;
	this->mState.mSongOffsetMS = 0;
	this->mState.mVolume = 1.0;
	this->mState.mPlaybackState = EBoomboxPlaybackState::EStopped;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->bReplicates = true;
	this->RootComponent = mAkComponent;
}
void AFGBoomBoxPlayer::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBoomBoxPlayer::PostSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBoomBoxPlayer::PreLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBoomBoxPlayer::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBoomBoxPlayer::GatherDependencies_Implementation(TArray< UObject* >& out_dependentObjects){ }
bool AFGBoomBoxPlayer::NeedTransform_Implementation(){ return bool(); }
bool AFGBoomBoxPlayer::ShouldSave_Implementation() const{ return bool(); }
void AFGBoomBoxPlayer::Tick(float DeltaTime){ }
void AFGBoomBoxPlayer::Multicast_Play_Implementation(){ }
void AFGBoomBoxPlayer::Multicast_Stop_Implementation(){ }
void AFGBoomBoxPlayer::Multicast_TogglePlayback_Implementation(){ }
void AFGBoomBoxPlayer::Multicast_NextSong_Implementation(){ }
void AFGBoomBoxPlayer::Multicast_PreviousSong_Implementation(){ }
void AFGBoomBoxPlayer::Multicast_SetCurrentTape_Implementation(TSubclassOf<class UFGTapeData> tape){ }
void AFGBoomBoxPlayer::Multicast_SetAudioVolume_Implementation(float normalizedVolume){ }
void AFGBoomBoxPlayer::Multicast_SuspendPlayback_Implementation(){ }
void AFGBoomBoxPlayer::Multicast_ResumePlayback_Implementation(){ }
bool AFGBoomBoxPlayer::IsPlaying(){ return bool(); }
bool AFGBoomBoxPlayer::IsEffectivelyPlaying(){ return bool(); }
FSongData AFGBoomBoxPlayer::GetCurrentSong(){ return FSongData(); }
void AFGBoomBoxPlayer::RegisterStateListener(TScriptInterface<class IFGBoomboxListenerInterface> stateListener){ }
void AFGBoomBoxPlayer::UnregisterStateListener(TScriptInterface<class IFGBoomboxListenerInterface > stateListener){ }
TSubclassOf<UFGTapeData> AFGBoomBoxPlayer::GetCurrentTape(){ return TSubclassOf<UFGTapeData>(); }
UAkComponent* AFGBoomBoxPlayer::GetAkComponent() const{ return nullptr; }
void AFGBoomBoxPlayer::Play(){ }
void AFGBoomBoxPlayer::Stop(){ }
bool AFGBoomBoxPlayer::CanFireTurboBass() const{ return bool(); }
void AFGBoomBoxPlayer::ResetState(FBoomBoxPlayerState state){ }
FBoomBoxPlayerState AFGBoomBoxPlayer::GetState(){ return FBoomBoxPlayerState(); }
void AFGBoomBoxPlayer::NextSong(){ }
void AFGBoomBoxPlayer::PreviousSong(){ }
void AFGBoomBoxPlayer::SetAudioVolume(float normalizedVolume, bool notifyListeners){ }
void AFGBoomBoxPlayer::BeginPlay(){ }
void AFGBoomBoxPlayer::OnPawnPossessed( APawn* pawn,  AController* controller){ }
void AFGBoomBoxPlayer::OnceClientSubsystemsAreReady(){ }
void AFGBoomBoxPlayer::SongFinished(EAkCallbackType cbType, UAkCallbackInfo* cbInfo){ }
void AFGBoomBoxPlayer::SetCurrentTape(TSubclassOf<class UFGTapeData> tape){ }
float AFGBoomBoxPlayer::GetAudioVolume(){ return float(); }
void AFGBoomBoxPlayer::GetCurrentPlaybackPosition(float& out_currentPosition, float& out_maxDuration){ }
void AFGBoomBoxPlayer::SetCurrentSong(int32 currentSong, int32 songOffsetMs){ }
void AFGBoomBoxPlayer::FetchCurrentSongOffsetMS(){ }
void AFGBoomBoxPlayer::UpdateTickFunction(){ }
void AFGBoomBoxPlayer::SanitizeListeners(){ }
void AFGBoomBoxPlayer::SetPlaybackState(EBoomboxPlaybackState playbackState){ }
void AFGBoomBoxPlayer::StopPlayingNoNotify(){ }
void AFGBoomBoxPlayer::StartPlayingNoNotify(int32 song, int32 offsetMs){ }
void AFGBoomBoxPlayer::UpdatePostPlayerControllerChange(){ }
