// This file has been automatically generated by the Unreal Header Implementation tool

#include "FGObjectReference.h"

FObjectRedirect::FObjectRedirect(const FString& source, const FString& destination){ }
FObjectReferenceDisc::FObjectReferenceDisc(){ }
FObjectReferenceDisc::FObjectReferenceDisc(UObject* obj){ }
bool FObjectReferenceDisc::IsNullptr() const{ return bool(); }
void FObjectReferenceDisc::Reset(){ }
UObject* FObjectReferenceDisc::Resolve(UWorld* world) const{ return nullptr; }
bool FObjectReferenceDisc::ResolveWithRedirect(UWorld* world, const FString& outerName, UObject*& out_object, UObject*& out_outer) const{ return bool(); }
UObject* FObjectReferenceDisc::StaticFindOrLoad(UClass* ObjectClass, UObject* InObjectPackage, const TCHAR* OrigInName, bool isProbablyClass){ return nullptr; }
AActor* FObjectReferenceDisc::TryResolveActorWithNewLevel(UWorld* world, ULevel* newLevel){ return nullptr; }
void FObjectReferenceDisc::Set(UObject* obj){ }
void FObjectReferenceDisc::ParseObjectName(FString& out_objName) const{ }
void FObjectReferenceDisc::ParseObjectNameAndPath(FString& out_objPath, FString& out_objName) const{ }
void FObjectReferenceDisc::GetRelativePath(UObject* obj, FString& out_pathName){ }
ULevel* FObjectReferenceDisc::FindOuterLevel(UObject* obj){ return nullptr; }
ULevel* FObjectReferenceDisc::FindLevel(UWorld* world) const{ return nullptr; }
bool FObjectReferenceDisc::Valid() const{ return bool(); }
FString FObjectReferenceDisc::ToString() const{ return FString(); }
void FObjectReferenceDisc::ClearRedirects(){ }
bool FObjectReferenceDisc::FindRedirect(const FString& oldName, FString& out_newRedirectedName){ return bool(); }
bool FObjectReferenceDisc::BlueprintAttemptAutomaticRedirect(){ return bool(); }
void FObjectReferenceDisc::AddRedirector(const FString& source, const FString& destination){ }
ULevel* FObjectReferenceDisc::InternalFindLevel(UWorld* world, const FString& levelName) const{ return nullptr; }
bool FObjectReferenceDisc::IsModdingModuleLoaded = bool();
bool FObjectReferenceDisc::ForceUseRedirects = bool();
