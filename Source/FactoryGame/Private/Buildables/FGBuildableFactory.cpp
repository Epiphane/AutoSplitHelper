// This file has been automatically generated by the Unreal Header Implementation tool

#include "Buildables/FGBuildableFactory.h"
#include "FGPowerInfoComponent.h"
#include "Hologram/FGFactoryHologram.h"
#include "Replication/FGReplicationDetailInventoryComponent.h"

AFGBuildableFactory::AFGBuildableFactory() : Super() {
	this->mPowerConsumption = 0.0;
	this->mPowerConsumptionExponent = 1.6;
	this->mPowerInfoClass = UFGPowerInfoComponent::StaticClass();
	this->mDoesHaveShutdownAnimation = false;
	this->mPowerInfo = nullptr;
	this->mMinimumProducingTime = 2.0;
	this->mMinimumStoppedTime = 5.0;
	this->mTimeSinceStartStopProducing = 0.0;
	this->mCanEverMonitorProductivity = false;
	this->mCanChangePotential = false;
	this->mPendingPotential = 1.0;
	this->mMinPotential = 0.01;
	this->mMaxPotential = 1.0;
	this->mMaxPotentialIncreasePerCrystal = 0.5;
	this->mFluidStackSizeDefault = EStackSize::SS_FLUID;
	this->mFluidStackSizeMultiplier = 1;
	this->mIsProductionPaused = false;
	this->mReplicationDetailActor = nullptr;
	this->mInventoryPotential = nullptr;
	this->mInventoryPotentialHandler = CreateDefaultSubobject<UFGReplicationDetailInventoryComponent>(TEXT("InventoryPotentialHandler"));
	this->mCurrentPotential = 1.0;
	this->mEffectUpdateInterval = 0.0;
	this->mDefaultProductivityMeasurementDuration = 300.0;
	this->mLastProductivityMeasurementProduceDuration = 300.0;
	this->mLastProductivityMeasurementDuration = 300.0;
	this->mCurrentProductivityMeasurementProduceDuration = 0.0;
	this->mCurrentProductivityMeasurementDuration = 0.0;
	this->mCurrentProductivity = 0;
	this->mProductivityMonitorEnabled = false;
	this->mIsProducing = false;
	this->mHasPower = false;
	this->mAddToSignificanceManager = true;
	this->mSignificanceRange = 18000.0;
	this->mHologramClass = AFGFactoryHologram::StaticClass();
	this->mFactoryTickFunction.TickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->mFactoryTickFunction.bTickEvenWhenPaused = false;
	this->mFactoryTickFunction.bCanEverTick = true;
	this->mFactoryTickFunction.bStartWithTickEnabled = true;
	this->mFactoryTickFunction.bAllowTickOnDedicatedServer = true;
	this->mFactoryTickFunction.TickInterval = 0.0;
	this->PrimaryActorTick.TickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.EndTickGroup = ETickingGroup::TG_PrePhysics;
	this->PrimaryActorTick.bTickEvenWhenPaused = false;
	this->PrimaryActorTick.bCanEverTick = true;
	this->PrimaryActorTick.bStartWithTickEnabled = true;
	this->PrimaryActorTick.bAllowTickOnDedicatedServer = true;
	this->PrimaryActorTick.TickInterval = 0.0;
	this->NetDormancy = ENetDormancy::DORM_Awake;
}
void AFGBuildableFactory::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
	Super::GetLifetimeReplicatedProps(OutLifetimeProps);
	DOREPLIFETIME(AFGBuildableFactory, mPowerInfo);
	DOREPLIFETIME(AFGBuildableFactory, mPendingPotential);
	DOREPLIFETIME(AFGBuildableFactory, mIsProductionPaused);
	DOREPLIFETIME(AFGBuildableFactory, mReplicationDetailActor);
	DOREPLIFETIME(AFGBuildableFactory, mCurrentPotential);
	DOREPLIFETIME(AFGBuildableFactory, mCurrentProductivity);
	DOREPLIFETIME(AFGBuildableFactory, mIsProducing);
	DOREPLIFETIME(AFGBuildableFactory, mHasPower);
}
void AFGBuildableFactory::PreReplication(IRepChangedPropertyTracker& ChangedPropertyTracker){ }
bool AFGBuildableFactory::GetNetDormancy(const FVector& ViewPos, const FVector& ViewDir,  AActor* Viewer, AActor* ViewTarget, UActorChannel* InChannel, float Time, bool bLowBandwidth){ return bool(); }
void AFGBuildableFactory::BeginPlay(){ }
void AFGBuildableFactory::EndPlay(const EEndPlayReason::Type EndPlayReason){ }
void AFGBuildableFactory::Tick(float dt){ }
void AFGBuildableFactory::Destroyed(){ }
void AFGBuildableFactory::PreSaveGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableFactory::PostLoadGame_Implementation(int32 saveVersion, int32 gameVersion){ }
void AFGBuildableFactory::GainedSignificance_Implementation(){ }
void AFGBuildableFactory::LostSignificance_Implementation(){ }
void AFGBuildableFactory::GainedSignificance_Native(){ }
void AFGBuildableFactory::LostSignificance_Native(){ }
void AFGBuildableFactory::SetupForSignificance(){ }
void AFGBuildableFactory::Factory_Tick(float dt){ }
void AFGBuildableFactory::OnUse_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGBuildableFactory::OnUseStop_Implementation( AFGCharacterPlayer* byCharacter, const FUseState& state){ }
void AFGBuildableFactory::GetDismantleRefund_Implementation(TArray< FInventoryStack >& out_refund) const{ }
void AFGBuildableFactory::OnBuildableReplicationDetailStateChange(bool newStateIsActive){ }
void AFGBuildableFactory::OnReplicationDetailActorCreated(){ }
void AFGBuildableFactory::OnReplicationDetailActorRemoved(){ }
bool AFGBuildableFactory::ShouldSkipBuildEffect(){ return bool(); }
TArray< UFGFactoryConnectionComponent* > AFGBuildableFactory::GetConnectionComponents() const{ return TArray<UFGFactoryConnectionComponent*>(); }
float AFGBuildableFactory::GetEmissivePower(){ return float(); }
float AFGBuildableFactory::GetIdlePowerConsumption() const{ return float(); }
float AFGBuildableFactory::GetProducingPowerConsumption() const{ return float(); }
float AFGBuildableFactory::GetDefaultProducingPowerConsumption() const{ return float(); }
float AFGBuildableFactory::CalcPowerConsumption(float power, float overclock, float exponent){ return float(); }
float AFGBuildableFactory::CalcProducingPowerConsumptionForPotential(float potential) const{ return float(); }
bool AFGBuildableFactory::IsConfigured() const{ return bool(); }
bool AFGBuildableFactory::CanProduce_Implementation() const{ return bool(); }
void AFGBuildableFactory::SetIsProductionPaused(bool isPaused){ }
EProductionStatus AFGBuildableFactory::GetProductionIndicatorStatus() const{ return EProductionStatus(); }
float AFGBuildableFactory::GetProductionProgress() const{ return float(); }
float AFGBuildableFactory::GetProductionCycleTime() const{ return float(); }
float AFGBuildableFactory::GetDefaultProductionCycleTime() const{ return float(); }
float AFGBuildableFactory::GetProductionCycleTimeForRecipe(TSubclassOf< UFGRecipe > recipe) const{ return float(); }
float AFGBuildableFactory::CalcProductionCycleTimeForPotential(float potential) const{ return float(); }
float AFGBuildableFactory::GetProductivity() const{ return float(); }
float AFGBuildableFactory::GetProductivityMeasurementDuration() const{ return float(); }
void AFGBuildableFactory::SetPendingPotential(float newPendingPotential){ }
float AFGBuildableFactory::GetCurrentMaxPotential() const{ return float(); }
float AFGBuildableFactory::GetMaxPossiblePotential() const{ return float(); }
void AFGBuildableFactory::TryStopIdlingLoopEffects(bool didLosePower){ }
void AFGBuildableFactory::TryStartIdlingLoopEffects(bool didGainPower){ }
void AFGBuildableFactory::TryStartProductionLoopEffects(bool didStartProducing){ }
void AFGBuildableFactory::TryStopProductionLoopEffects(bool didStopProducing){ }
void AFGBuildableFactory::UpdateAnimTickOption(EVisibilityBasedAnimTickOption newOption){ }
void AFGBuildableFactory::OnIsProducingChanged_Native(bool newIsProducing){ }
void AFGBuildableFactory::OnHasPowerChanged_Native(bool newHasPower){ }
void AFGBuildableFactory::SetCurrentPotential(float newCurrentPotential){ }
void AFGBuildableFactory::OnReplicatingDetailsChanged(){ }
void AFGBuildableFactory::Factory_ProductionCycleCompleted(float overProductionRate){ }
void AFGBuildableFactory::Factory_CollectInput_Implementation(){ }
void AFGBuildableFactory::Factory_PullPipeInput_Implementation(float dt){ }
void AFGBuildableFactory::Factory_PushPipeOutput_Implementation(float dt){ }
void AFGBuildableFactory::Factory_StartProducing(){ }
void AFGBuildableFactory::Factory_TickProducing(float dt){ }
void AFGBuildableFactory::Factory_TickProductivity(float dt){ }
void AFGBuildableFactory::Factory_StopProducing(){ }
void AFGBuildableFactory::NativeUpdateEffects(float DeltaSeconds){ }
void AFGBuildableFactory::OnRep_ReplicationDetailActor(){ }
AFGReplicationDetailActor* AFGBuildableFactory::GetOrCreateReplicationDetailActor(){ return nullptr; }
void AFGBuildableFactory::OnRep_CurrentPotential(){ }
void AFGBuildableFactory::OnRep_IsProductionPaused(){ }
void AFGBuildableFactory::OnRep_IsProducing(){ }
void AFGBuildableFactory::OnPotentialInventoryItemRemoved(TSubclassOf<  UFGItemDescriptor > itemClass, int32 numRemoved){ }
bool AFGBuildableFactory::FilterPotentialInventoryClasses(TSubclassOf< UObject > object, int32 idx) const{ return bool(); }
void AFGBuildableFactory::SetIsProducing(uint8 isProducing){ }
void AFGBuildableFactory::SetHasPower(uint8 hasPower){ }
void AFGBuildableFactory::SetCurrentProductivity(uint8 productivity){ }
void AFGBuildableFactory::SetProductivityMonitorEnabled(bool enabled){ }
